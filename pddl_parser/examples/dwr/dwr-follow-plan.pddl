(define (domain dwr)
(:requirements :strips :typing :negative-preconditions)
(:types
	location pile robot crane container order - object
)
(:predicates
	(adjacent ?l1 - location ?l2 - location)
	(attached ?p - pile ?l - location)
	(belong ?k - crane ?l - location)
	(at ?r - robot ?l - location)
	(occupied ?l - location)
	(loaded ?r - robot ?c - container)
	(unloaded ?r - robot)
	(holding ?k - crane ?c - container)
	(empty ?k - crane)
	(in ?c - container ?p - pile)
	(top ?c - container ?p - pile)
	(on ?k1 - container ?k2 - container)
	(equal ?c1 - object ?c2 - object)
	
	(last ?o - order)
	(before ?o1 ?o2 - order)

	(plan-action-move ?o - order ?r - robot ?from - location ?to - location)
	(plan-action-load ?o - order ?k - crane ?r - robot ?c - container ?l - location)
	(plan-action-unload ?o - order ?k - crane ?r - robot ?c - container ?l - location)
	(plan-action-put ?o - order ?k - crane ?c - container ?c2 - container ?p - pile ?l - location)
	(plan-action-take ?o - order ?k - crane ?c - container ?c2 - container ?p - pile ?l - location)
)
(:action move
	:parameters (?olast - order ?ocurrent - order ?r - robot ?from - location ?to - location)
	:precondition (and			
			 (at ?r ?from)
			 (adjacent ?from ?to)			
			 (not (occupied ?to))
			 (last ?olast)
			 (before ?olast ?ocurrent)
			 (plan-action-move ?ocurrent ?r ?from ?to))
	:effect (and			
			 (at ?r ?to)
			 (occupied ?to)			
			 (not (at ?r ?from))
			 (not (occupied ?from))
			 (not (last ?olast))
			 (last ?ocurrent))
)
(:action load
	:parameters (?olast - order ?ocurrent - order ?k - crane ?r - robot ?c - container ?l - location)
	:precondition (and			
			 (unloaded ?r)
			 (at ?r ?l)
			 (holding ?k ?c)
			 (belong ?k ?l)			
			 (not (equal ?c pallet))
			 (last ?olast)
			 (before ?olast ?ocurrent)
			 (plan-action-load ?ocurrent ?k ?r ?c ?l))
	:effect (and			
			 (empty ?k)
			 (loaded ?r ?c)			
			 (not (unloaded ?r))
			 (not (holding ?k ?c))
			 (not (last ?olast))
			 (last ?ocurrent))
)
(:action unload
	:parameters (?olast - order ?ocurrent - order ?k - crane ?r - robot ?c - container ?l - location)
	:precondition (and			
			 (empty ?k)
			 (at ?r ?l)
			 (loaded ?r ?c)
			 (belong ?k ?l)			
			 (not (equal ?c pallet))
			 (last ?olast)
			 (before ?olast ?ocurrent)
			 (plan-action-unload ?ocurrent ?k ?r ?c ?l))
	:effect (and			
			 (unloaded ?r)
			 (holding ?k ?c)			
			 (not (empty ?k))
			 (not (loaded ?r ?c))
			 (not (last ?olast))
			 (last ?ocurrent))
)
(:action put
	:parameters (?olast - order ?ocurrent - order ?k - crane ?c - container ?c2 - container ?p - pile ?l - location)
	:precondition (and			
			 (attached ?p ?l)
			 (top ?c2 ?p)
			 (holding ?k ?c)
			 (belong ?k ?l)			
			 (not (equal ?c ?c2))
			 (not (equal ?c pallet))
			 (last ?olast)
			 (before ?olast ?ocurrent)
			 (plan-action-put ?ocurrent ?k ?c ?c2 ?p ?l))
	:effect (and			
			 (empty ?k)
			 (top ?c ?p)
			 (in ?c ?p)
			 (on ?c ?c2)			
			 (not (top ?c2 ?p))
			 (not (holding ?k ?c))
			 (not (last ?olast))
			 (last ?ocurrent))
)
(:action take
	:parameters (?olast - order ?ocurrent - order ?k - crane ?c - container ?c2 - container ?p - pile ?l - location)
	:precondition (and			
			 (empty ?k)
			 (top ?c ?p)
			 (attached ?p ?l)
			 (belong ?k ?l)
			 (on ?c ?c2)
			 (in ?c ?p)			
			 (not (equal ?c ?c2))
			 (not (equal ?c pallet))
			 (last ?olast)
			 (before ?olast ?ocurrent)
			 (plan-action-take ?ocurrent ?k ?c ?c2 ?p ?l))
	:effect (and			
			 (top ?c2 ?p)
			 (holding ?k ?c)			
			 (not (empty ?k))
			 (not (top ?c ?p))
			 (not (in ?c ?p))
			 (not (on ?c ?c2))
			 (not (last ?olast))
			 (last ?ocurrent))
)

)